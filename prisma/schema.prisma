generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  otp        String        @unique
  otpRef     String        @unique
  otpExpires DateTime
  session    UserSession[]
  // firstName     String
  // lastName      String
  // organizations Organization[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model UserSession {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  token  String
  // Organization   Organization? @relation(fields: [organizationId], references: [id])
  // organizationId String?       @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Organization {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  // User       User?         @relation(fields: [userId], references: [id])
  // userId     String?       @db.ObjectId
  org_name   String
  role       String
  email      String       @unique
  phone      String
  website    String
  addressId  String?      @db.ObjectId
  address    Address?     @relation(fields: [addressId], references: [id])
  isDeleted  Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Department Department[]
}

model Department {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  orgId        String?       @db.ObjectId
  organization Organization? @relation(fields: [orgId], references: [id])
  name         String
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Empoloyee    Employee[]
}

model Employee {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  dep_id            String?             @db.ObjectId
  department        Department?         @relation(fields: [dep_id], references: [id])
  first_name        String
  last_name         String
  email             String
  date_of_birth     String
  phone_nmber       String
  hire_date         String
  job_title         String
  salary            String
  isDeleted         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Leave_request     Leave_request[]
  Attendance        Attendance[]
  Employee_document Employee_document[]
}

model Leave_request {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  emp_id     String?   @db.ObjectId
  employee   Employee? @relation(fields: [emp_id], references: [id])
  start_date String
  end_date   String
  leave_type String
  status     String    @default("pending")
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Attendance {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  emp_id    String?   @db.ObjectId
  employee  Employee? @relation(fields: [emp_id], references: [id])
  att_date  String
  clock_in  String
  clock_out String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Employee_document {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  emp_id    String?   @db.ObjectId
  employee  Employee? @relation(fields: [emp_id], references: [id])
  doc_name  String
  doc_type  String
  doc_file  String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  address      String
  city         String
  state        String
  zipcode      String
  organization Organization[]
}
